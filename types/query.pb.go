// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: farmchain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e324466b7ae1c37, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e324466b7ae1c37, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetLocationDataRequest struct {
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Location  string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *QueryGetLocationDataRequest) Reset()         { *m = QueryGetLocationDataRequest{} }
func (m *QueryGetLocationDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLocationDataRequest) ProtoMessage()    {}
func (*QueryGetLocationDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e324466b7ae1c37, []int{2}
}
func (m *QueryGetLocationDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLocationDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLocationDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLocationDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLocationDataRequest.Merge(m, src)
}
func (m *QueryGetLocationDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLocationDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLocationDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLocationDataRequest proto.InternalMessageInfo

func (m *QueryGetLocationDataRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *QueryGetLocationDataRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type QueryGetLocationDataResponse struct {
	LocationData LocationData `protobuf:"bytes,1,opt,name=locationData,proto3" json:"locationData"`
}

func (m *QueryGetLocationDataResponse) Reset()         { *m = QueryGetLocationDataResponse{} }
func (m *QueryGetLocationDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLocationDataResponse) ProtoMessage()    {}
func (*QueryGetLocationDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e324466b7ae1c37, []int{3}
}
func (m *QueryGetLocationDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLocationDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLocationDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLocationDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLocationDataResponse.Merge(m, src)
}
func (m *QueryGetLocationDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLocationDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLocationDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLocationDataResponse proto.InternalMessageInfo

func (m *QueryGetLocationDataResponse) GetLocationData() LocationData {
	if m != nil {
		return m.LocationData
	}
	return LocationData{}
}

type QueryAllLocationDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLocationDataRequest) Reset()         { *m = QueryAllLocationDataRequest{} }
func (m *QueryAllLocationDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLocationDataRequest) ProtoMessage()    {}
func (*QueryAllLocationDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e324466b7ae1c37, []int{4}
}
func (m *QueryAllLocationDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLocationDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLocationDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLocationDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLocationDataRequest.Merge(m, src)
}
func (m *QueryAllLocationDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLocationDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLocationDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLocationDataRequest proto.InternalMessageInfo

func (m *QueryAllLocationDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLocationDataResponse struct {
	LocationData []LocationData      `protobuf:"bytes,1,rep,name=locationData,proto3" json:"locationData"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLocationDataResponse) Reset()         { *m = QueryAllLocationDataResponse{} }
func (m *QueryAllLocationDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLocationDataResponse) ProtoMessage()    {}
func (*QueryAllLocationDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e324466b7ae1c37, []int{5}
}
func (m *QueryAllLocationDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLocationDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLocationDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLocationDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLocationDataResponse.Merge(m, src)
}
func (m *QueryAllLocationDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLocationDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLocationDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLocationDataResponse proto.InternalMessageInfo

func (m *QueryAllLocationDataResponse) GetLocationData() []LocationData {
	if m != nil {
		return m.LocationData
	}
	return nil
}

func (m *QueryAllLocationDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLocationByDataRequest struct {
	Timestamp        string             `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Crop             string             `protobuf:"bytes,2,opt,name=crop,proto3" json:"crop,omitempty"`
	Temperature      string             `protobuf:"bytes,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Humidity         string             `protobuf:"bytes,4,opt,name=humidity,proto3" json:"humidity,omitempty"`
	SoilMoisture     string             `protobuf:"bytes,5,opt,name=soilMoisture,proto3" json:"soilMoisture,omitempty"`
	GrowthPercentage string             `protobuf:"bytes,6,opt,name=growthPercentage,proto3" json:"growthPercentage,omitempty"`
	Pagination       *query.PageRequest `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetLocationByDataRequest) Reset()         { *m = QueryGetLocationByDataRequest{} }
func (m *QueryGetLocationByDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLocationByDataRequest) ProtoMessage()    {}
func (*QueryGetLocationByDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e324466b7ae1c37, []int{6}
}
func (m *QueryGetLocationByDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLocationByDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLocationByDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLocationByDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLocationByDataRequest.Merge(m, src)
}
func (m *QueryGetLocationByDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLocationByDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLocationByDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLocationByDataRequest proto.InternalMessageInfo

func (m *QueryGetLocationByDataRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *QueryGetLocationByDataRequest) GetCrop() string {
	if m != nil {
		return m.Crop
	}
	return ""
}

func (m *QueryGetLocationByDataRequest) GetTemperature() string {
	if m != nil {
		return m.Temperature
	}
	return ""
}

func (m *QueryGetLocationByDataRequest) GetHumidity() string {
	if m != nil {
		return m.Humidity
	}
	return ""
}

func (m *QueryGetLocationByDataRequest) GetSoilMoisture() string {
	if m != nil {
		return m.SoilMoisture
	}
	return ""
}

func (m *QueryGetLocationByDataRequest) GetGrowthPercentage() string {
	if m != nil {
		return m.GrowthPercentage
	}
	return ""
}

func (m *QueryGetLocationByDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLocationByDataResponse struct {
	Location   []string            `protobuf:"bytes,1,rep,name=location,proto3" json:"location,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetLocationByDataResponse) Reset()         { *m = QueryGetLocationByDataResponse{} }
func (m *QueryGetLocationByDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLocationByDataResponse) ProtoMessage()    {}
func (*QueryGetLocationByDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e324466b7ae1c37, []int{7}
}
func (m *QueryGetLocationByDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLocationByDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLocationByDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLocationByDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLocationByDataResponse.Merge(m, src)
}
func (m *QueryGetLocationByDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLocationByDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLocationByDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLocationByDataResponse proto.InternalMessageInfo

func (m *QueryGetLocationByDataResponse) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *QueryGetLocationByDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "cosmonaut.farmchain.farmchain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cosmonaut.farmchain.farmchain.QueryParamsResponse")
	proto.RegisterType((*QueryGetLocationDataRequest)(nil), "cosmonaut.farmchain.farmchain.QueryGetLocationDataRequest")
	proto.RegisterType((*QueryGetLocationDataResponse)(nil), "cosmonaut.farmchain.farmchain.QueryGetLocationDataResponse")
	proto.RegisterType((*QueryAllLocationDataRequest)(nil), "cosmonaut.farmchain.farmchain.QueryAllLocationDataRequest")
	proto.RegisterType((*QueryAllLocationDataResponse)(nil), "cosmonaut.farmchain.farmchain.QueryAllLocationDataResponse")
	proto.RegisterType((*QueryGetLocationByDataRequest)(nil), "cosmonaut.farmchain.farmchain.QueryGetLocationByDataRequest")
	proto.RegisterType((*QueryGetLocationByDataResponse)(nil), "cosmonaut.farmchain.farmchain.QueryGetLocationByDataResponse")
}

func init() { proto.RegisterFile("farmchain/query.proto", fileDescriptor_0e324466b7ae1c37) }

var fileDescriptor_0e324466b7ae1c37 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xae, 0xbb, 0xad, 0x30, 0x6f, 0x12, 0x60, 0x06, 0xaa, 0xca, 0x16, 0xa6, 0x48, 0x63, 0x68,
	0x40, 0xcc, 0x06, 0x27, 0x7e, 0x1c, 0xb6, 0x01, 0x93, 0xf8, 0x21, 0x8d, 0x4a, 0x08, 0x69, 0x97,
	0xc9, 0xed, 0x4c, 0x1a, 0x29, 0x89, 0xb3, 0xd8, 0x01, 0xaa, 0x2a, 0x07, 0x10, 0x9c, 0xb8, 0x20,
	0x71, 0xdf, 0x95, 0xff, 0x02, 0x71, 0xdc, 0x71, 0x12, 0x1c, 0x38, 0x21, 0xb4, 0xf2, 0x87, 0xa0,
	0x38, 0x6e, 0x93, 0xb4, 0x19, 0xed, 0xaa, 0xdd, 0xdc, 0xf7, 0xfc, 0xde, 0xfb, 0xbe, 0x7c, 0xcf,
	0x5f, 0xe1, 0x85, 0x57, 0xc4, 0x77, 0xea, 0x0d, 0x62, 0xb9, 0x78, 0x37, 0xa0, 0x7e, 0xd3, 0xf0,
	0x7c, 0x26, 0x18, 0x9a, 0xab, 0x33, 0xee, 0x30, 0x97, 0x04, 0xc2, 0xe8, 0x5e, 0x48, 0x4e, 0x95,
	0x19, 0x93, 0x99, 0x4c, 0xde, 0xc4, 0xd1, 0x29, 0x2e, 0xaa, 0xcc, 0x9a, 0x8c, 0x99, 0x36, 0xc5,
	0xc4, 0xb3, 0x30, 0x71, 0x5d, 0x26, 0x88, 0xb0, 0x98, 0xcb, 0x55, 0x76, 0x49, 0xb6, 0xe4, 0xb8,
	0x46, 0x38, 0x8d, 0x67, 0xe1, 0xd7, 0xcb, 0x35, 0x2a, 0xc8, 0x32, 0xf6, 0x88, 0x69, 0xb9, 0xf2,
	0xb2, 0xba, 0x7b, 0x31, 0x41, 0xe5, 0x11, 0x9f, 0x38, 0x9d, 0x1e, 0x73, 0x49, 0xdc, 0x66, 0x75,
	0x59, 0xb1, 0xbd, 0x43, 0x04, 0x89, 0xd3, 0xfa, 0x0c, 0x44, 0xcf, 0xa3, 0xc6, 0x9b, 0xb2, 0xa6,
	0x4a, 0x77, 0x03, 0xca, 0x85, 0xbe, 0x05, 0xcf, 0x67, 0xa2, 0xdc, 0x63, 0x2e, 0xa7, 0x68, 0x1d,
	0x96, 0xe2, 0xde, 0x65, 0x30, 0x0f, 0xae, 0x4e, 0xad, 0x2c, 0x18, 0xff, 0xe5, 0x6c, 0xc4, 0xe5,
	0x6b, 0xe3, 0xfb, 0xbf, 0x2f, 0x17, 0xaa, 0xaa, 0x54, 0x7f, 0x09, 0x2f, 0xc9, 0xde, 0x1b, 0x54,
	0x3c, 0x55, 0x80, 0x1e, 0x10, 0x41, 0xd4, 0x68, 0x34, 0x0b, 0x27, 0x85, 0xe5, 0x50, 0x2e, 0x88,
	0xe3, 0xc9, 0x31, 0x93, 0xd5, 0x24, 0x80, 0x2a, 0xf0, 0x74, 0x87, 0x45, 0xb9, 0x28, 0x93, 0xdd,
	0xdf, 0x7a, 0x00, 0x67, 0xf3, 0x1b, 0x2b, 0xf4, 0x2f, 0xe0, 0xb4, 0x9d, 0x8a, 0x2b, 0x0e, 0xd7,
	0x06, 0x70, 0x48, 0xb7, 0x52, 0x4c, 0x32, 0x6d, 0x74, 0xaa, 0xf8, 0xac, 0xda, 0x76, 0x1e, 0x9f,
	0x47, 0x10, 0x26, 0x5a, 0xa9, 0x99, 0x57, 0xe2, 0x99, 0xdc, 0x88, 0x84, 0x35, 0xe2, 0x25, 0x52,
	0xc2, 0x1a, 0x9b, 0xc4, 0xa4, 0xaa, 0xb6, 0x9a, 0xaa, 0xd4, 0xbf, 0x01, 0x45, 0xaf, 0x6f, 0xce,
	0x91, 0xf4, 0xc6, 0x4e, 0x80, 0x1e, 0xda, 0xc8, 0xe0, 0x2f, 0x4a, 0xfc, 0x8b, 0x03, 0xf1, 0xc7,
	0x98, 0x32, 0x04, 0xbe, 0x16, 0xe1, 0x5c, 0xaf, 0x3e, 0x6b, 0xcd, 0xe1, 0xa5, 0x47, 0x70, 0xbc,
	0xee, 0x33, 0x4f, 0xc9, 0x2e, 0xcf, 0x68, 0x1e, 0x4e, 0x09, 0xea, 0x78, 0xd4, 0x27, 0x22, 0xf0,
	0x69, 0x79, 0x4c, 0xa6, 0xd2, 0xa1, 0x68, 0x61, 0x1a, 0x81, 0x63, 0xed, 0x58, 0xa2, 0x59, 0x1e,
	0x8f, 0x17, 0xa6, 0xf3, 0x1b, 0xe9, 0x70, 0x9a, 0x33, 0xcb, 0x7e, 0xc6, 0x2c, 0x2e, 0xcb, 0x27,
	0x64, 0x3e, 0x13, 0x43, 0x4b, 0xf0, 0xac, 0xe9, 0xb3, 0x37, 0xa2, 0xb1, 0x49, 0xfd, 0x3a, 0x75,
	0x05, 0x31, 0x69, 0xb9, 0x24, 0xef, 0xf5, 0xc5, 0x7b, 0xa4, 0x3e, 0x35, 0xb2, 0xd4, 0x1f, 0x01,
	0xd4, 0x8e, 0xfa, 0x52, 0x4a, 0xec, 0xf4, 0x3b, 0x88, 0x84, 0x4e, 0xbd, 0x83, 0x13, 0x53, 0x6c,
	0xa5, 0x5d, 0x82, 0x13, 0x12, 0x07, 0xda, 0x03, 0xb0, 0x14, 0x3f, 0x66, 0xb4, 0x3c, 0x60, 0xa1,
	0xfa, 0xdd, 0xa4, 0xb2, 0x72, 0x9c, 0x92, 0x18, 0x87, 0x7e, 0xe3, 0xfd, 0x8f, 0xbf, 0x5f, 0x8a,
	0x8b, 0x68, 0x01, 0x77, 0x6b, 0x71, 0xe2, 0x64, 0xbd, 0x5e, 0x87, 0x7e, 0x02, 0x38, 0x9d, 0x5e,
	0x65, 0x74, 0x67, 0x98, 0x99, 0xf9, 0x16, 0x54, 0xb9, 0x3b, 0x52, 0xad, 0x02, 0xfe, 0x44, 0x02,
	0x7f, 0x88, 0xd6, 0x07, 0x00, 0xcf, 0x98, 0x31, 0x6e, 0x75, 0xf7, 0x3c, 0xc4, 0xad, 0x4e, 0x2a,
	0x44, 0xdf, 0x01, 0x3c, 0x93, 0x9e, 0xb2, 0x6a, 0xdb, 0xc3, 0x31, 0xcb, 0x37, 0xa3, 0xe1, 0x98,
	0x1d, 0x61, 0x30, 0xfa, 0x6d, 0xc9, 0xcc, 0x40, 0xd7, 0x8f, 0xc3, 0x0c, 0xed, 0x15, 0xe1, 0xb9,
	0xbe, 0x3d, 0x46, 0xf7, 0x8e, 0xf9, 0x89, 0x33, 0x46, 0x51, 0xb9, 0x3f, 0x62, 0xb5, 0x22, 0xf2,
	0x09, 0x48, 0x26, 0x1f, 0x00, 0x7a, 0x07, 0x06, 0x70, 0x31, 0xa9, 0xd8, 0xee, 0xf2, 0xa9, 0x35,
	0x73, 0xc4, 0x8a, 0x7c, 0x28, 0xc4, 0xad, 0x94, 0xe7, 0x84, 0xb8, 0xd5, 0xb1, 0x98, 0x10, 0xb7,
	0xd2, 0x6e, 0x12, 0xe2, 0x56, 0xaf, 0x69, 0x84, 0x6b, 0x8f, 0xf7, 0x0f, 0x35, 0x70, 0x70, 0xa8,
	0x81, 0x3f, 0x87, 0x1a, 0xf8, 0xdc, 0xd6, 0x0a, 0x07, 0x6d, 0xad, 0xf0, 0xab, 0xad, 0x15, 0xb6,
	0x6e, 0x9a, 0x96, 0x68, 0x04, 0x35, 0xa3, 0xce, 0x9c, 0x5c, 0x98, 0x6f, 0x53, 0x67, 0xd1, 0xf4,
	0x28, 0xaf, 0x95, 0xe4, 0x9f, 0xfa, 0xad, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x47, 0x42,
	0x61, 0xa3, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a LocationData by index.
	LocationData(ctx context.Context, in *QueryGetLocationDataRequest, opts ...grpc.CallOption) (*QueryGetLocationDataResponse, error)
	// Queries a list of LocationData items.
	LocationDataAll(ctx context.Context, in *QueryAllLocationDataRequest, opts ...grpc.CallOption) (*QueryAllLocationDataResponse, error)
	// Queries a list of GetLocationByData items.
	GetLocationByData(ctx context.Context, in *QueryGetLocationByDataRequest, opts ...grpc.CallOption) (*QueryGetLocationByDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cosmonaut.farmchain.farmchain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LocationData(ctx context.Context, in *QueryGetLocationDataRequest, opts ...grpc.CallOption) (*QueryGetLocationDataResponse, error) {
	out := new(QueryGetLocationDataResponse)
	err := c.cc.Invoke(ctx, "/cosmonaut.farmchain.farmchain.Query/LocationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LocationDataAll(ctx context.Context, in *QueryAllLocationDataRequest, opts ...grpc.CallOption) (*QueryAllLocationDataResponse, error) {
	out := new(QueryAllLocationDataResponse)
	err := c.cc.Invoke(ctx, "/cosmonaut.farmchain.farmchain.Query/LocationDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLocationByData(ctx context.Context, in *QueryGetLocationByDataRequest, opts ...grpc.CallOption) (*QueryGetLocationByDataResponse, error) {
	out := new(QueryGetLocationByDataResponse)
	err := c.cc.Invoke(ctx, "/cosmonaut.farmchain.farmchain.Query/GetLocationByData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a LocationData by index.
	LocationData(context.Context, *QueryGetLocationDataRequest) (*QueryGetLocationDataResponse, error)
	// Queries a list of LocationData items.
	LocationDataAll(context.Context, *QueryAllLocationDataRequest) (*QueryAllLocationDataResponse, error)
	// Queries a list of GetLocationByData items.
	GetLocationByData(context.Context, *QueryGetLocationByDataRequest) (*QueryGetLocationByDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LocationData(ctx context.Context, req *QueryGetLocationDataRequest) (*QueryGetLocationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationData not implemented")
}
func (*UnimplementedQueryServer) LocationDataAll(ctx context.Context, req *QueryAllLocationDataRequest) (*QueryAllLocationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationDataAll not implemented")
}
func (*UnimplementedQueryServer) GetLocationByData(ctx context.Context, req *QueryGetLocationByDataRequest) (*QueryGetLocationByDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationByData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmonaut.farmchain.farmchain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LocationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLocationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LocationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmonaut.farmchain.farmchain.Query/LocationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LocationData(ctx, req.(*QueryGetLocationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LocationDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLocationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LocationDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmonaut.farmchain.farmchain.Query/LocationDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LocationDataAll(ctx, req.(*QueryAllLocationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLocationByData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLocationByDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLocationByData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmonaut.farmchain.farmchain.Query/GetLocationByData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLocationByData(ctx, req.(*QueryGetLocationByDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmonaut.farmchain.farmchain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LocationData",
			Handler:    _Query_LocationData_Handler,
		},
		{
			MethodName: "LocationDataAll",
			Handler:    _Query_LocationDataAll_Handler,
		},
		{
			MethodName: "GetLocationByData",
			Handler:    _Query_GetLocationByData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farmchain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLocationDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLocationDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLocationDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLocationDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLocationDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLocationDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LocationData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLocationDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLocationDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLocationDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLocationDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLocationDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLocationDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LocationData) > 0 {
		for iNdEx := len(m.LocationData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LocationData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLocationByDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLocationByDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLocationByDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GrowthPercentage) > 0 {
		i -= len(m.GrowthPercentage)
		copy(dAtA[i:], m.GrowthPercentage)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GrowthPercentage)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SoilMoisture) > 0 {
		i -= len(m.SoilMoisture)
		copy(dAtA[i:], m.SoilMoisture)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SoilMoisture)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Humidity) > 0 {
		i -= len(m.Humidity)
		copy(dAtA[i:], m.Humidity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Humidity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Temperature) > 0 {
		i -= len(m.Temperature)
		copy(dAtA[i:], m.Temperature)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Temperature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Crop) > 0 {
		i -= len(m.Crop)
		copy(dAtA[i:], m.Crop)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Crop)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLocationByDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLocationByDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLocationByDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Location) > 0 {
		for iNdEx := len(m.Location) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Location[iNdEx])
			copy(dAtA[i:], m.Location[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Location[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLocationDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLocationDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocationData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLocationDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLocationDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LocationData) > 0 {
		for _, e := range m.LocationData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLocationByDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Crop)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Temperature)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Humidity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SoilMoisture)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GrowthPercentage)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLocationByDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Location) > 0 {
		for _, s := range m.Location {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLocationDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLocationDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLocationDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLocationDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLocationDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLocationDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocationData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLocationDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLocationDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLocationDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLocationDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLocationDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLocationDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationData = append(m.LocationData, LocationData{})
			if err := m.LocationData[len(m.LocationData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLocationByDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLocationByDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLocationByDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Temperature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Humidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Humidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoilMoisture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoilMoisture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowthPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrowthPercentage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLocationByDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLocationByDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLocationByDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
